import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'application'
    id 'org.beryx.jlink' version "$jlink"
}

repositories {
    mavenCentral()

    flatDir {
        dirs "${project(':demo').projectDir}/libs"
    }
}

dependencies {

    implementation 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'

    // If you also want the core library
    implementation 'de.jensd:fontawesomefx-commons:8.15'

    implementation 'com.google.api-client:google-api-client:1.32.1'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.32.1'
    implementation 'com.google.apis:google-api-services-oauth2:v2-rev157-1.25.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.google.http-client:google-http-client-jackson2:1.43.3'




    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'org.mindrot:jbcrypt:0.4'

    testImplementation "org.testfx:testfx-core:$testfx"
    testImplementation "org.testfx:testfx-junit5:$testfx"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit"
    testImplementation "org.junit.platform:junit-platform-suite-api:$junitSuite"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit"

    implementation "io.github.palexdev:scenicview:$scenicView"
    implementation("fr.brouillard.oss:cssfx:$cssfx") { exclude group: 'org.openjfx' }
    implementation "org.kordamp.ikonli:ikonli-core:$ikonli"
    implementation "org.kordamp.ikonli:ikonli-javafx:$ikonli"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:$ikonli"
    implementation "io.github.palexdev:virtualizedfx:$vfx"
    implementation project(':materialfx')
    implementation "mysql:mysql-connector-java:8.0.33"

    implementation 'org.slf4j:slf4j-api:2.0.9' // Use the latest version
    implementation 'org.slf4j:slf4j-simple:2.0.9' // Use the latest version
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    
}

compileJava {
    sourceCompatibility = "$testJdk"
    targetCompatibility = "$testJdk"
}

compileTestJava {
    moduleOptions {
        compileOnClasspath = true
    }
}

test {
    useJUnitPlatform()

    moduleOptions {
        runOnClasspath = true
    }
}

application {
    setMainModule("MaterialFX.Demo")
    String main = project.findProperty("chooseMain").toString()
    if (main != "null" && !main.trim().isEmpty()) {
        setMainClassName(main)
    } else {
        setMainClassName("io.github.palexdev.materialfx.demo.Demo")
    }
    applicationDefaultJvmArgs = ["-Dglass.disableGrab=true"]
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        mainClass = "io.github.palexdev.materialfx.demo.Demo"
        name = 'MaterialFX Demo'
    }
    jpackage {
        imageOptions = ['--icon', 'src/main/resources/logo.ico']
    }

    targetPlatform("linux-x64") {
        jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu19.32.13-ca-jdk19.0.2-linux_x64.tar.gz")
        addExtraModulePath("/home/palexdev/Documents/JavaFX_jmods/linux_x64")
    }

    targetPlatform("win") {
        jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu19.32.13-ca-jdk19.0.2-win_x64.zip")
        addExtraModulePath("/home/palexdev/Documents/JavaFX_jmods/win_x64")
    }

    targetPlatform("mac") {
        jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu19.32.13-ca-jdk19.0.2-macosx_x64.tar.gz")
        addExtraModulePath("/home/palexdev/Documents/JavaFX_jmods/mac_x64")
    }

    addExtraDependencies('javafx')
}

tasks.register('doPackageAll') {
    doLast {
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            exec {
                mkdir("$layout.buildDirectory/distributions")
                executable "$rootDir/scripts/JLinkPackage.sh"
                args = ["$layout.buildDirectory"]
            }
        }
    }
}

jlinkZip.doLast {
    doPackageAll
}